#!/bin/bash
#######################################################
# Wallpaper Management via feh
# Michael Pratt
# http://michael-pratt.com
#######################################################
set -e
CONFIGFOLDER="${HOME}/.config/wallpaper_script"
SUBREDDITS=("/r/EarthPorn" "/r/wallpapers" "/r/wallpaper" )
UA="Mozilla / Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36 / mpratt Wallpaper Grabber 1.0"
USEPREVIOUS=0
USEREDDIT=0
USEEARTHVIEW=0
USEBING=0
VERBOSE=0
FULLHELP=0
mkdir -p "${CONFIGFOLDER}/cache"
mkdir -p "${CONFIGFOLDER}/img"
#######################################################
# Usage instructions
#######################################################
wallpaper_usage() {
    clear
    echo "Wallpaper"
    echo "Usage: wallpaper [--folder [folder]][ --file [file]][--use-previous]"
    echo "                 [--random][--verbose][--clean]"
    echo "                 [--use-random-subreddit][--use-subreddit [subreddit]]"
    echo "                 [--use-earthview]"
    echo "                 [--use-bing]"
    echo ""

    if [ "${FULLHELP}" -eq 1 ]; then
        echo "Requirements: feh, curl, wget"
        echo "Author: Michael Pratt <yo@michael-pratt.com>"
        echo ""
        echo "DESCRIPTION"
        echo "  Wallpaper managment script, requires feh"
        echo ""
        echo "PARAMS"
        echo "--folder [folder]"
        echo "  A folder with jpg, png or gif files. Used to fetch a random wallpapers from it"
        echo ""
        echo "--file [file]"
        echo "  Path to an image file to be used as a wallpaper"
        echo ""
        echo "--random"
        echo "  Pick a random wallpaper from earthview, bing, folder and reddit"
        echo ""
        echo "--use-previous"
        echo "  Checks the home folder for a .fehbg file and runs it"
        echo ""
        echo "--use-random-subreddit"
        echo "  Fetches a random image file from reddit"
        echo ""
        echo "--use-subreddit"
        echo "  Fetches images from the given subreddit. No need to add the /r/ prefix."
        echo ""
        echo "--use-earthview"
        echo "  Fetches a Random earthview Image"
        echo ""
        echo "--use-bing"
        echo "  Fetches a Random bing Image"
        echo ""
        echo "--clean"
        echo "  Cleans cached responses"
        echo ""
        echo "--verbose"
        echo "  Verbose Output"
        echo ""
        echo "AUTHOR"
        echo "  Michael Pratt <yo@michael-pratt.com>"
        echo "  http://www.michael-pratt.com"
        echo ""
    fi
    exit 0
}

#######################################################
# Check for Internet Access
#######################################################
check_internet() {
    echo "Checking Internet Access ...."
    wget --user-agent="${UA}" -q --spider https://eltiempo.com
    if [ $? -ne 0 ]; then
        echo "ERROR: No Internet Access found"
        exit 1
    fi
}

#######################################################
# Set Wallpaper
#######################################################
set_wallpaper() {
    local file=${1}

    if ! [ -e "${file}" ]; then
        echo "ERROR: ${file} not found!"
        exit 1
    fi

    echo "Setting Wallpaper ${file}"
    case ${DESKTOP_SESSION} in
        xfce|XFCE)
            for property in $(xfconf-query --channel xfce4-desktop --list | grep last-image); do
                xfconf-query --channel xfce4-desktop --property ${property} --set "${file}"
            done ;;

        *plasma)
            plasma-apply-wallpaperimage "${file}" ;;
        *) feh --bg-scale "${file}" ;;
esac

echo "${file}" > "${CONFIGFOLDER}/last-image"
}

#######################################################
# Downloads an Image from a website
#######################################################
set_download_image() {
    local img=${1}

    # No stuff from
    if [ -z "${img}" ]; then
        echo "ERROR: No Image given"
        exit 1
    fi

    local filename=$(basename ${img} | tr '[:upper:]' '[:lower:]')
    local extension="${filename##*.}"
    if [ -z "${extension}" ]; then
        extension="jpg"
    else
        extension=$(echo ${extension%&*} | sed 's/?.*//g')
    fi

    local out="$(echo "${CONFIGFOLDER}/img/$(date +"%m-%d-%Y")_${filename}" | sed 's/?.*//g').${extension}"
    out="${out/png.png/png}"
    out="${out/jpg.jpg/jpg}"
    out="${out/gif.gif/gif}"

    echo "$(date) : Downloading ${img} to ${out} - Ext: ${extension}" >> ${CONFIGFOLDER}/app.log
    if [ "${VERBOSE}" -eq 1 ]; then
        echo "Downloading ${img} to ${out} - Ext: ${extension}"
    fi

    wget -q --user-agent="${UA}" ${img} -O ${out}
    if [ "$?" -eq "0" ]; then
        echo ${out}
        set_wallpaper ${out}
    else
        echo "ERROR: Could not download ${img}"
        exit 1
    fi
}

#######################################################
# Downloads from Reddit
#######################################################
download_from_reddit() {
    local url="${1}"
    local list=()
    check_internet

    if [ "${VERBOSE}" -eq 1 ]; then
        echo "Fetching subreddit API list ${url}"
    fi

    for im in $(make_http_request ${url} | tr "," "\n" | grep -E '"url"' | grep -E -o 'https?:[^"]+' | grep -v 'external-' | grep -v 'award_image' | grep -v '/award'); do
        if [ -n "$(echo ${im} | grep -E -i '(png|gif|gif|s\=(.*?))$')" ]; then
            list+=( "${im/preview/i}" )
        fi
    done

    if [ "${#list[@]}" -le 0 ]; then
        echo "ERROR: No Images Found on ${1}"
        exit 1
    fi

    set_download_image ${list[$RANDOM % ${#list[@]}]}
}

#######################################################
# Makes an Http request and does some minor caching
#######################################################
make_http_request() {
    local url="${1}"
    local md5=$(echo $url | md5sum | tr -d '[:blank:]')
    if ! [ -e "${CONFIGFOLDER}/cache/${md5}.cache" ]; then
        wget -q --user-agent="${UA}" ${url} -O ${CONFIGFOLDER}/cache/${md5}.cache
    fi

    cat ${CONFIGFOLDER}/cache/${md5}.cache
    if [ -n "$(find ${CONFIGFOLDER}/cache/${md5}.cache -mmin +60)" ]; then
        rm ${CONFIGFOLDER}/cache/${md5}.cache
    fi
}

#######################################################
# Downloads from EarthView
#######################################################
download_from_earthview() {
    local url="https://raw.githubusercontent.com/limhenry/earthview/refs/heads/master/earthview.json"

    check_internet

    if [ "${VERBOSE}" -eq 1 ]; then
        echo "Making Request to ${url}"
    fi

    local src=$(make_http_request ${url})
    local images="$(echo ${src} | grep -E -o 'https://www.gstatic.com/prettyearth/assets/full/[0-9]+.jpg' | uniq)"

    echo "Found ${#images} images on Earthview"
    for i in ${images}; do
        set_download_image ${i}
    done
}

#######################################################
# Downloads from Bing
#######################################################
download_from_bing() {
    local url="http://www.bing.com/HPImageArchive.aspx?format=js&idx=0&n=10&mkt=en-US"

    check_internet

    if [ "${VERBOSE}" -eq 1 ]; then
        echo "Making Request to ${url}"
    fi

    local src=$(make_http_request ${url})
    local images="$(echo ${src} | tr "," "\n" | grep -E '"url"' | grep -E -o '"/(.+)"' | tr -d '"')"
    local list=()

    for im in ${images}; do
        if [ -n "$(echo ${im} | grep -E -i '\.(png|jpg|gif)')" ]; then
            list+=( "https://bing.com${im}" )
        fi
    done

    if [ "${#list[@]}" -le 0 ]; then
        echo "ERROR: No Images Found on ${1}"
        exit 1
    fi

    set_download_image ${list[$RANDOM % ${#list[@]}]}
}


#######################################################
# ACleanup process
#######################################################
cleanup() {
    echo "Cleaning up..."
    if [ -z "$(ls -A "${CONFIGFOLDER}/img/")" ]; then
        echo "Empty Image Folder.."
    else

        if [ "${VERBOSE}" -eq 1 ]; then
            echo "Checking for duplicate images..."
        fi

        cd "${CONFIGFOLDER}/img/"
        for f in $(md5sum * | sort | awk 'BEGIN{lasthash = ""} $1 == lasthash {print $2} {lasthash = $1}'); do
            if [ "${VERBOSE}" -eq 1 ]; then
                echo "Removing Duplicate: ${f}"
            fi

            rm -rf "${f}"
        done
    fi
}

#######################################################
# Yo DJ! Spin that wheel!
#######################################################
if [ "$#" -eq "0" ]; then
    wallpaper_usage
    exit 0
fi

while [ -n "$1" ]; do
    case ${1} in
        --verbose)
            shift
            VERBOSE="1"
            ;;
        --folder)
            shift
            set_wallpaper "$(find ${1} -type f -iname '*.jpg' -o -iname '*.png' -o -iname '*.gif' | shuf -n1)"
            shift
            ;;
        --file)
            shift
            set_wallpaper "${1}"
            shift
            ;;
        --use-previous)
            shift
            USEPREVIOUS="1"
            ;;
        --use-random-subreddit)
            shift
            USEREDDIT="1"
            ;;
        --use-earthview)
            shift
            USEEARTHVIEW="1"
            ;;
        --use-bing)
            shift
            USEBING="1"
            ;;
        --clean)
            shift
            rm -rf ${CONFIGFOLDER}/cache/*.cache
            ;;
        --use-subreddit)
            shift
            USEREDDIT="1"
            SUBREDDITS=( "/r/${1}" )
            shift
            ;;
        --random)
            shift
            POSIBILITIES=( "REDDIT" "BING"  "EARTHVIEW" )
            TERM="${POSIBILITIES[$RANDOM % ${#POSIBILITIES[@]}]}"
            if [ "${TERM}" == "BING" ]; then
                USEBING=1
            elif [ "${TERM}" == "EARTHVIEW" ]; then
                USEEARTHVIEW=1
            else
                USEREDDIT=1
            fi
            ;;
        -h|--help)
            FULLHELP=1
            wallpaper_usage
            exit 0
            ;;
        *) shift ;;
    esac
done

if [ "${USEPREVIOUS}" -eq "1" ]; then
    echo "Using latest wallpaper from ${CONFIGFOLDER}/last-image"
    if ! [ -e "${CONFIGFOLDER}/last-image" ]; then
        echo "ERROR: No Previous wallpaper found"
    else
        set_wallpaper $(cat "${CONFIGFOLDER}/last-image")
    fi
fi

if [ "${USEEARTHVIEW}" -eq "1" ]; then
    echo "Using Earthview"
    download_from_earthview
fi

if [ "${USEBING}" -eq "1" ]; then
    echo "Using Bing"
    download_from_bing
fi

if [ "${USEREDDIT}" -eq "1" ] && [ "${#SUBREDDITS[@]}" -gt "0" ]; then
    echo "Using Reddit"
    #URL="http://www.reddit.com${SUBREDDITS[$RANDOM % ${#SUBREDDITS[@]}]}/top.json?limit=100"
    URL="http://www.reddit.com${SUBREDDITS[$RANDOM % ${#SUBREDDITS[@]}]}.json?limit=100"
    download_from_reddit ${URL}
fi

cleanup
