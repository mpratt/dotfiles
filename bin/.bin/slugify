#!/bin/bash
##################################################################
# Renames a file into its slug equivalent. When a string is given
# it also slugifies it.
#
# Requires: iconv, tr, sed
# Author: Michael Pratt
# Url: http://wwww.michael-pratt.com/
#
# License: MIT
# Copyright (C) 2017 by Michael Pratt
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
##################################################################
set -e

## Initialize defaults
dry_run=0
verbose=0

## Initialize valid options
opt_string=hnv

## Usage function
function usage(){
    echo "usage: $(basename ${0}) [-${opt_string}] file|text ..."
    echo "   -h: help"
    echo "   -n: dry run"
    echo "   -v: verbose"
}

## For each provided option arg
while getopts ${opt_string} opt
do
    case ${opt} in
        h) usage; exit 0 ;;
        n) dry_run=1 ;;
        v) verbose=1 ;;
        *) exit 1 ;;
    esac
done

## Remove options from args
shift "$(( $OPTIND - 1 ))"

## Unless source_file arg(s) found, print usage and exit (0 to avoid breaking pipes)
if [ "${#}" -eq 0 ]; then
    usage
    exit 0
fi

## Notify if in dry_run mode
if [ ${dry_run} -eq 1 ]; then
    echo "--- Begin dry run mode."
fi

## For each file, directory, or glob
for source in "${@}"; do

    ## Initialize target
    target="${source}"

    ## Transliterate non ascii words
    target=$(echo "${target}" | iconv -f utf-8 -t us-ascii//TRANSLIT)

    ## convert to lowercase
    target=$(echo "${target}" | tr A-Z a-z )

    ## convert existing underscores to spaces
    target=$(echo "${target}" | tr _ ' ')

    ## convert existing dashes to spaces
    target=$(echo "${target}" | tr - ' ')

    ## consolidate spaces
    target=$(echo "${target}" | tr -s ' ')

    ## remove spaces immediately adjacent to dashes
    target=$(echo "${target}" | sed 's/\- /-/')
    target=$(echo "${target}" | sed 's/ \-/-/')

    # Replace spaces with dashes
    target=$(echo "${target}" | tr ' ' "-")

    ## Verify source exists
    if [ ! -e "${source}" ]; then
        echo "${target}"
    elif [ "${target}" == "${source}" ]; then
        echo "${target}"
        if [ ${verbose} -eq 1 ]; then
            echo "ignore: ${source}"
        fi
    elif [ -e "${target}" ]; then
        echo "conflict: ${target}"
    else
        if [ ${dry_run} -eq 0 ]; then
            mv "${source}" "${target}"
        fi

        echo "rename: ${source} -> ${target}"
    fi

done

## Notify if in dry_run mode
if [ ${dry_run} -eq 1 ]; then
    echo "--- End dry run mode."
fi
