#!/bin/bash
##################################################################
#  Backup script
#  Author Michael Pratt
#  Url: http://michael-pratt.com
##################################################################
APPNAME=$(basename ${0})
VERSION="0.2"
MOUNT="/run/media/pratt/storage"
OUTPUTDIR="${MOUNT}/$(hostname)/$(whoami)"
MOUNTPOINT="1"
DIALOG=${DIALOG:- dialog}

# Backup Modes
HOME_FOLDERS=('Archive' 'Audio' 'Documents' 'Downloads' 'Pictures' 'Projects' 'Public' 'Videos')
HOME_CONFIG_FOLDERS=('.config' '.aws' '.serverless' '.ssh' '.bin'  )
SYSTEM_FOLDERS=( '/etc' )

# Constants
DATE=$(date +%Y-%m-%d)
YEAR=$(date +%Y)
MONTH=$(date +%m)
HOURMINUTE=$(date +%H_%M_%S)
FOLDERS=()
ONOROFF="off"
ARCHIVEDIR="${HOME}/Archive/${YEAR}"

[ ! -e "${HOME}/tmp" ] && mkdir -p "${HOME}/tmp"
[ ! -e "${ARCHIVEDIR}" ] && mkdir -p "${ARCHIVEDIR}"
TMPDIR=$(mktemp -d --tmpdir="${HOME}/tmp" -t ${APPNAME}.XXXXXX)
trap "rm -rf ${TMPDIR} && exit" 0 1 2 9 15

##################################################################
# Log actions
##################################################################
function backup_log() {
    echo "$(date +%H:%M:%S)# ${1}" >> ${OUTPUTDIR}/${APPNAME}-${DATE}.log;
}

##################################################################
# Backup Main Home Folders
##################################################################
function backup_home_folders() {
    local rsyncflags="-artzL --progress --delete"
    for folder in "${HOME_FOLDERS[@]}"; do
        if ! [ -e "${HOME}/${folder}" ]; then
            echo "!!! ${HOME}/${folder} doesnt exist."
            backup_log "!!! ${HOME}/${folder} doesnt exist."
            continue
        fi

        echo "** Syncing ${folder} to ${OUTPUTDIR}/${folder}"
        backup_log "** Syncing ${folder} to ${OUTPUTDIR}/${folder}"
        backup_log "*** Command Used: rsync ${rsyncflags} ${HOME}/${folder} ${SPECIALDIR}"
        rsync ${rsyncflags} "${HOME}/${folder}" "${OUTPUTDIR}"
    done
}

##################################################################
# Backup Main Home Folders
##################################################################
function backup_sync_archive() {
    local rsyncflags="-artzL --progress --delete"
    echo "** Syncing Archive to ${OUTPUTDIR}/Archive"
    backup_log "** Syncing Archive to ${OUTPUTDIR}/Archive"
    backup_log "*** Command Used: rsync ${rsyncflags} Archive ${OUTPUTDIR}"
    rsync ${rsyncflags} "${HOME}/Archive" "${OUTPUTDIR}"
}

##################################################################
# Backup System Folders
##################################################################
function backup_system_folders() {
    local tarfile=""
    for folder in "${SYSTEM_FOLDERS[@]}"; do
        echo "** Backing up ${folder} to ${ARCHIVEDIR}"
        backup_log "** Backing up ${folder}"
        backup_log "*** Command Used: tar cvzf ${ARCHIVEDIR}/$(basename ${folder})-${DATE}.tar.gz ${folder}"
        tar cvzf "${ARCHIVEDIR}/$(basename ${folder})-${DATE}.tar.gz" "${folder}"
    done
}

##################################################################
# Backup a single folder/file
##################################################################
function backup_folder_or_file() {
    local folder="${1}"
    if ! [ -e "${folder}" ]; then
        echo "!!! ${folder} doesnt exist."
        backup_log "!!! ${folder} doesnt exist."
        return 1
    fi

    echo "** Backing up ${folder} to ${ARCHIVEDIR}"
    backup_log "** Backing up ${folder}"
    backup_log "*** Command Used: tar cvzf ${ARCHIVEDIR}/$(basename ${folder} | tr '.' '_')-${DATE}.tar.gz ${folder}"
    tar cvzf "${ARCHIVEDIR}/$(basename ${folder} | tr '.' '_')-${DATE}.tar.gz" "${folder}"
}

#################################################################
# Shows the usage
#################################################################
backup_usage() {
    clear
    echo "$APPNAME - $VERSION"
    echo "Script that helps me backup my stuff in an external drive"
    echo ""
    echo "Requirements: ${DIALOG}, tar, rsync"
    echo "Author: Michael Pratt"
    echo ""
    echo "Usage: $(basename $0) [OPTIONS]"
    echo "    -f | --folder      Name folder you want to backup"
    echo "    -o | --output-dir  Output directory where stuff is going to stored"
    echo "    --select-yes       Folders are selected by default when prompting the selection dialog"
    echo "    --not-mount-point  Do not check if the output directory is a mount point"
    echo ""
}

##################################################################
# Get options and perform minor checks before running
##################################################################
while [ -n "$1" ]; do
    case ${1} in
        -f|--folder) shift; FOLDERS+=( "${1}" ); shift ;;
        --not-mount-point) shift; MOUNTPOINT="0"; shift ;;
        --select-yes) shift; ONOROFF="on"; shift ;;
        --ignore-hidden) shift; SHOWHIDDEN="0"; shift ;;
        -h|--help) backup_usage; exit 0 ;;
        -o|--output-dir)
            shift
            if [ -d "${1}" ]; then
                OUTPUTDIR="${1}"
            else
                echo "The output dir ${1} doesnt exist"
                exit 0
            fi
            shift
        ;;
    esac
done

if [[ "${MOUNTPOINT}" == "1" && "$(mountpoint -q "${OUTPUTDIR}")" ]]; then
    echo "Error: ${OUTPUTDIR} is not a mountpoint! If that was intended use the '--not-mount-point' parameter"
    exit 1
fi

##################################################################
# Mi buenos aires se ve tan suceptible...
##################################################################
echo "Warming up..."
[ ! -e "${OUTPUTDIR}" ] && mkdir -p "${OUTPUTDIR}"

if [[ "${#FOLDERS[@]}" -gt 0 ]]; then
    for folder in "${FOLDERS[@]}"; do
        backup_folder_or_file "${folder}"
        backup_sync_archive
    done
    exit 0
fi

echo "Showing dialog options"
printf "\"%s\" \"%s\" ${ONOROFF} \\ \n" "1" "Backup Home Folders" >> $TMPDIR/folder_list
printf "\"%s\" \"%s\" ${ONOROFF} \\ \n" "2" "Backup Home Config" >> $TMPDIR/folder_list
printf "\"%s\" \"%s\" ${ONOROFF} \\ \n" "3" "Backup System Folders" >> $TMPDIR/folder_list
cat ${TMPDIR}/folder_list | uniq | sort | xargs ${DIALOG} --clear --title "${APPNAME} ${VERSION}" --backtitle "${APPNAME} ${VERSION}" --item-help --separate-output --checklist "Choose the folders/files" 15 70 10 2> ${TMPDIR}/tmp_selection
rm -rf ${TMPDIR}/folder_list

TIMER_START=$(date +%s)
if [ "$(stat -c%s ${TMPDIR}/tmp_selection)" -eq 0 ]; then
    ${DIALOG} --clear --title "${APPNAME} ${VERSION}" --backtitle "${APPNAME} ${VERSION}" --msgbox "No folders selected" 15 110
    exit 1
fi

clear
backup_log "========================================================================"
backup_log "[${APPNAME} - $(whoami)@$(hostname)] $(date)"
backup_log "Resetting Outputdir to ${OUTPUTDIR}"

TSTART=$(date +%s)
backup_log "** Backing up Folders"
for fo in $(cat ${TMPDIR}/tmp_selection); do
    if [[ ${fo} == 1 ]]; then
        backup_home_folders
    fi

    if [[ ${fo} == 2 ]]; then
        for folder in "${HOME_CONFIG_FOLDERS[@]}"; do
            [[ -e "${HOME}/${folder}" ]] && backup_folder_or_file "${HOME}/${folder}"
        done
    fi

    if [[ ${fo} == 3 ]]; then
        backup_system_folders
    fi
done
backup_sync_archive

TSTOP=$(date +%s)
backup_log "Done. Total Time: $(echo "($TSTOP - $TSTART)/60" | bc) minutes"
backup_log "========================================================================"
echo "Done!"
