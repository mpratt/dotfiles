#!/usr/bin/env python
"""
This script generates playlists for my mp3 collection.
It builds the playlists from either the title, id3's genre
and id3's comment

Author: Michael Pratt <pratt@hablarmierda.net>
"""

import os
import argparse
import unicodedata
import re
import eyed3

def is_mp3_file(filename):
    """ Checks if file is an mp3 file, based on the extension

    :param file: location of the file
    :returns: bool
    """
    ext = str(os.path.splitext(filename)[1]).lower()
    return ext == '.mp3'

def get_mp3_files(path):
    """ Generator that returns mp3 files found on the given path

    :param path: the path where the mp3s should be
    :returns: string with the file path
    """
    for dirname, dirnames, filenames in sorted(os.walk(path)):
        for filename in filenames:
            filepath = os.path.join(dirname, filename)
            if is_mp3_file(filepath):
                yield filepath

def get_audio_data(filename):
    """ Returns a dictionary with information about the file

    :param file: absolute path to the mp3 file
    :returns: dict
    """

    audio_file = eyed3.load(filename)
    artist = audio_file.tag.artist
    title = audio_file.tag.title
    time = audio_file.info.time_secs
    album = audio_file.tag.album
    genre = re.sub('^\(.*\)', '', str(audio_file.tag._getGenre().name).lower().replace('|', ',').replace('/', ','))

    try:
        year = audio_file.tag.getBestDate().year
    except:
        year = None

    comments = []
    for i in audio_file.tag.comments:
        comment = correct_playlist_names(i.text.lower())
        comments += comment.replace('|', ',').replace('/', ',').strip('|').split(',')

    return {
        'artist' : artist,
        'title' : title,
        'album' : album,
        'time'  : time,
        'comments' : filter(None, comments),
        'genre' : genre.split(','),
        'year' : year
    }

def correct_playlist_names(text):
    """ Corrects common typos when writing lists

    :param text: string with list names
    :returns: string
    """

    if not text:
        return ''

    table = {
        'soundtracks': 'soundtrack',
        'sountrack': 'soundtrack',
        'acoustic': 'unplugged',
        'cover': 'covers',
        'detusch': 'deutsch',
        'aletrnative': 'alternative',
        'let-go': 'lets-go',
    }

    for key in table.keys():
        text = text.replace(key, table[key])

    regexes = [
        'https?://\S+', 'ripped', 'cxmxix', 'to\xf1o valverde', 'feat',
        'ac_ripper', 'ripp', 'created by', 'Florilegium Musicorum Aetati', 'eeuu', 'm3u',
        'goo goo dolls cover', 'good', 'bitches', 'one group to rule them all', 'tranquil',
        '\xa9 \xa4 @', 'album title', 'artist album', 'Luisitou',
    ]

    " Ignore urls, strange checksums and 'ripped by' tags "
    regex = re.compile('|'.join(regexes), re.IGNORECASE)
    if re.match(regex, text) or len(text) <= 2 or len(text) > 40:
        return ''

    return text

def find_genre_playlists(data):
    """ Returns a set with genre playlists where a file could belong to
    It looks mostly at the genre, commets and title

    :param data: dict with information about the file
    :returns: set with playlists
    """
    playlists = []

    if data['genre']:
        playlists += data['genre']

    if data['comments']:
        playlists += data['comments']

    matches = re.findall('\(\s*(cover|live|unplugged|acoustic|remix|instrumental)', data['title'].lower())
    if matches:
        if 'cover' in matches:
            matches.remove('cover')
            matches += ['covers']

        if 'acoustic' in matches:
            matches.remove('acoustic')
            matches += ['unplugged']

        if 'remix' in matches:
            matches.remove('remix')
            matches += ['remix']

        if 'instrumental' in matches:
            matches.remove('instrumental')
            matches += ['instrumental']

        playlists += matches

    return set([x for x in playlists if x != 'none'])

def find_album_playlist(data):
    """ Returns a playlist based on the album

    :param data: dict with information about the file
    :returns: string with the playlist
    """

    return data['album'].lower() + '.m3u'

def find_artist_playlist(data):
    """ Returns a playlist based on the artist

    :param data: dict with information about the file
    :returns: string with the playlist
    """

    return data['artist'].lower() + '.m3u'

def find_yearly_playlist(data):
    """ Returns a playlist based on the year

    :param data: dict with information about the file
    :returns: string with the playlist
    """

    if data['year'] and str(data['year']).isdigit():
        median = round(int(data['year']), -1)
        return 'years-{}-{}.m3u'.format((int(median) - 5), (int(median) + 4))

    return '00-without-year.m3u'

def strip_accents(s):
    return ''.join(c for c in unicodedata.normalize('NFD', s) if unicodedata.category(c) != 'Mn')

def add_to_playlist(file, list, data = None):
    """ Adds a new file into a given playlist

    :param file: Location to the mp3 file
    :param list: Location of the playlist where the file should be added
    :param data: dict Mp3 data
    :returns: void
    """

    if not list:
        return

    exists = os.path.isfile(list)
    playlist = open(list, 'a')
    if not exists:
        playlist.write("#EXTM3U\n")

    if data:
        metadata = u"#EXTINF: {}, {} - {} \n".format(data['time'], data['artist'], data['title'])
        playlist.write(metadata.encode('utf8'))

    playlist.write(file + "\n")
    playlist.close()
    try:
        print 'Added to {}'.format(os.path.basename(list))
    except:
        pass

def playlist_path(folder, listname):
    """ Cleans the playlist name, removing useless chars

    :param folder: Location where the playlist should be saved
    :param listname: The name of the playlist.
    :returns: string
    """

    listname = listname.title().strip()
    for char in ['(', ')', '\'', '"', '[', ']']:
        listname = listname.replace(char, '')

    for char in [' ', '..', ',', '!', '%', '#', '$', '@', '*', '/', '\\', '&', '+', ':']:
        listname = listname.replace(char, '-')


    listname = strip_accents(unicode(listname))
    listname = re.sub('-+', '-', listname)
    listname = re.sub('\.+', '.', listname)
    listname = listname.strip('-,.')

    if not listname:
        return

    return os.path.join(folder, listname.replace('.M3U', '.m3u').replace('0S.', '0s.'))

def delete_playlists_in(path):
    """ Removes m3u file in the given path

    :param path: Location where the playlists should be
    :returns: void
    """

    for f in [f for f in os.listdir(path) if f.endswith('.m3u')]:
        os.remove(os.path.join(path, f))

if __name__ == "__main__":

    # Configuration options
    # CWD = os.path.dirname(os.path.abspath(__file__))
    HOMEDIR = os.path.expanduser("~")

    # Parse Options
    parser = argparse.ArgumentParser()
    parser.add_argument("-m", "--mp3folder", help="Folder where all the mp3s are")
    parser.add_argument("-p", "--playlistfolder", help="Folder where the playlists are going to be generated")
    args = parser.parse_args()

    if args.mp3folder and os.path.isdir(args.mp3folder):
        AUDIOPATH = args.mp3folder
    else:
        AUDIOPATH = HOMEDIR + "/Audio/Music"

    if args.playlistfolder:
        PLAYLIST_FOLDER = args.playlistfolder
    else:
        PLAYLIST_FOLDER = HOMEDIR + "/Audio/Playlists"

    ARTIST_PLAYLIST_FOLDER = PLAYLIST_FOLDER + "/By-Artist"
    ALBUM_PLAYLIST_FOLDER  = PLAYLIST_FOLDER + "/By-Album"
    YEARLY_PLAYLIST_FOLDER = PLAYLIST_FOLDER + "/By-Year"

    if not os.path.exists(PLAYLIST_FOLDER):
        os.makedirs(PLAYLIST_FOLDER)

    if not os.path.exists(ARTIST_PLAYLIST_FOLDER):
        os.makedirs(ARTIST_PLAYLIST_FOLDER)

    if not os.path.exists(ALBUM_PLAYLIST_FOLDER):
        os.makedirs(ALBUM_PLAYLIST_FOLDER)

    if not os.path.exists(YEARLY_PLAYLIST_FOLDER):
        os.makedirs(YEARLY_PLAYLIST_FOLDER)

    delete_playlists_in(PLAYLIST_FOLDER)
    delete_playlists_in(ALBUM_PLAYLIST_FOLDER)
    delete_playlists_in(YEARLY_PLAYLIST_FOLDER)
    delete_playlists_in(ARTIST_PLAYLIST_FOLDER)

    for file in get_mp3_files(AUDIOPATH):
        short_name = str(os.path.basename(file)).replace('.mp3', '')
        print "Analizing {}".format(short_name)

        try:
            audioData = get_audio_data(file)
            genre_playlists = find_genre_playlists(audioData)
        except Exception, e:
            print "Error processing {} - {}".format(short_name, str(e))
            add_to_playlist(file, playlist_path(PLAYLIST_FOLDER, '00-unknown-errors.m3u'))
            continue

        if genre_playlists:
            for list in genre_playlists:
                add_to_playlist(file, playlist_path(PLAYLIST_FOLDER, list + '.m3u'), audioData)
        else:
            add_to_playlist(file, playlist_path(PLAYLIST_FOLDER, '00-unclassified.m3u'), audioData)

        if 'classical' not in list:
            add_to_playlist(file, playlist_path(PLAYLIST_FOLDER, '00-all-songs.m3u'), audioData)

        add_to_playlist(file, playlist_path(PLAYLIST_FOLDER, '00-all-songs-including-classical.m3u'), audioData)

        if audioData['album']:
            add_to_playlist(file, playlist_path(ALBUM_PLAYLIST_FOLDER, find_album_playlist(audioData)), audioData)
        else:
            add_to_playlist(file, playlist_path(PLAYLIST_FOLDER, '00-without-album.m3u'), audioData)

        add_to_playlist(file, playlist_path(ARTIST_PLAYLIST_FOLDER, find_artist_playlist(audioData)), audioData)
        add_to_playlist(file, playlist_path(YEARLY_PLAYLIST_FOLDER, find_yearly_playlist(audioData)), audioData)

        print "Done with {}".format(short_name)
