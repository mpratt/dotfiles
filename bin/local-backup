#!/bin/bash
##################################################################
#  Script para hacer mis respaldos de seguridad
#  Escrito por Michael Pratt <pratt@hablarmierda.net>
##################################################################
#set -e
APPNAME="Local Backup (Local backups)"
VERSION="0.3"
HOST=$(hostname)
DATE=$(date +%Y-%m-%d)
TMPDIR=$(mktemp -d -p /mnt/data/Archive/Backups/ -t LBackup-TMP.XXXXXX)
OUTPUTDIR="/mnt/data/Archive/Backups/$DATE"
DIALOG=${DIALOG:- dialog}

#################################################################
# Files/Dirs to back up. Without trailing slash
##################################################################
BACK_SYSDIR="/boot /etc /mnt/data/Imagenes /mnt/data/Proyectos /mnt/data/Documentos /var"
BACK_USERDIR=".opera .gconf .Skype .thunderbird .loki .wine .emacs.d .vim .config .gftp .kde .dosbox .mupen64plus .zsnes .fceux .q3a"

##################################################################
# Log actions
##################################################################
function backup_log() { echo "$(date +%H:%M:%S)# ${1}" >> ${OUTPUTDIR}/local-backup-${DATE}.log; }

##################################################################
# Backup the Database
#################################################################
function backup_db() 
{ 
    read -p "Enter Password for MySQL Database: " -s DBPASS
    echo ""

    if [ -n "${DBPASS}" ]; then
        backup_log "Performing Database Backups"
        mysqldump -u root -p${DBPASS} --all-databases > ${OUTPUTDIR}/full-database-backup-${DATE}.sql
        echo "DB backup done!"
    else
        backup_log "Error Performing Database Backup (no password given)"
    fi
}

##################################################################
# Copies a dir/file to its destination
##################################################################
function backup_cp()
{
	local folder=${1}
	local destination=${TMPDIR}
	local USERNAME=$(echo $1 | egrep -o '/home/([a-zA-Z0-9]+)/')
	[ -n "$USERNAME" ] && destination=${destination}/$(basename $USERNAME)

	if [ -e "$folder" ]; then
		echo "Backing up $folder ...."
		backup_log "Backing up $folder"
		rsync -a -l --delete "$folder" "$destination/"

		cd ${destination}
		for i in $(ls -A | egrep '^\.'); do
			local name=$(basename $i | sed 's/\./_/')
			mv ${i} ${name}
			backup_log "Renaming $i to $name"
		done

		# Fix perms
		[ "$(whoami)" = "root" ] && chmod 777 -R ${TMPDIR}/*
	else
		echo "$folder not found ..."
		backup_log "**** $folder does not exist"
	fi
}

##################################################################
# Archive function
##################################################################
function backup_tar()
{
	local USERNAME=$(echo $1 | egrep -o '/home/([a-zA-Z0-9]+)/')
	local PATH_DIR=${TMPDIR}
	[ -n "$USERNAME" ] && PATH_DIR=${PATH_DIR}/$(basename $USERNAME) && local Prefix=$(basename $USERNAME) || local Prefix=""
	PATH_DIR=${PATH_DIR}/$(basename $1 | sed 's/\./_/')
	local TARFILE=${TMPDIR}/${Prefix}$(basename $1 | sed 's/\./_/')-${HOST}-${DATE}.tar.gz

	echo "Preparing dir $1"
	if [ -e "$PATH_DIR" ]; then
		# clean unneeded files
		backup_log "Cleaning files: $(find $PATH_DIR -type f -iname "*~")"
		find $PATH_DIR -type f -iname "*~" | xargs rm -rf

		cd ${TMPDIR}
		[ -n "$USERNAME" ] && cd $(basename ${USERNAME})
		tar cvzf ${TARFILE} $(basename ${PATH_DIR})

		echo "$TARFILE to $OUTPUTDIR"
		mv ${TARFILE} ${OUTPUTDIR}
		backup_log "$TARFILE to $OUTPUTDIR"
	else
		echo "Directorio $PATH_DIR no Existe"
		echo "Error: Yo solo Zipeo Directorios"
		backup_log "*** El Archivo a Zipear no es un Directorio: $1 (Deduzco: $PATH_DIR)"
    fi
}

##################################################################
# Select the folders you want to backup
##################################################################
function backup_select()
{
    # Database Backup Instructions
    printf "\"%s\" \"%s\" on \\ \n" "MySQL-DB" "Backup MySQL Database" >> $TMPDIR/folder_list

	if [ "$(whoami)" = "root" ]; then
		# System wide folders
		for folder in ${BACK_SYSDIR}; do
			printf "\"%s\" \"%s\" off \\ \n" $(echo $folder) $(echo $folder) >> $TMPDIR/folder_list
		done

		# All user folders
		for user in $(ls /home/); do
			for folder in ${BACK_USERDIR}; do
				printf "\"%s\" \"%s\" on \\ \n" $(echo /home/$user/$folder) $(echo /home/$user/$folder) >> $TMPDIR/folder_list
			done
		done
	else
		# Current user folders
		for folder in ${BACK_USERDIR}; do
			printf "\"%s\" \"%s\" on \\ \n" $(echo $HOME/$folder) $(echo $HOME/$folder) >> $TMPDIR/folder_list
		done
	fi

	# Show the dialog
	cat ${TMPDIR}/folder_list | uniq | xargs ${DIALOG} --clear --title "$APPNAME $VERSION" --backtitle "$APPNAME $VERSION" --item-help --separate-output --checklist "Choose the folders" 15 70 10 2> ${TMPDIR}/tmp_selection
	rm -rf ${TMPDIR}/folder_list
}

##################################################################
# Lets Get It On!
##################################################################
trap "rm -rf $TMPDIR && exit" 0 1 2 9 15
[ ! -e "$OUTPUTDIR" ] && mkdir -p $OUTPUTDIR
[ "$(whoami)" = "root" ] && (chmod 777 -R $OUTPUTDIR)

# Run me
backup_select
TIMER_START=$(date +%s)
if [ "$(stat -c%s $TMPDIR/tmp_selection)" -eq 0 ]; then
	${DIALOG} --clear --title "$APPNAME $VERSION" --backtitle "$APPNAME $VERSION" --msgbox "No folders selected" 15 110
	exit 1
fi

clear
backup_log "========================================================================"
backup_log "[Local Backup - $HOST]"
TIMER_START=$(date +%s)
for folder in $(cat $TMPDIR/tmp_selection); do
	if [ -e "$folder" ]; then
		backup_cp ${folder}
		backup_tar ${folder}
    elif [[ "${folder}" == "MySQL-DB" ]]; then
        backup_db
	else
		backup_log "Folder $folder does not exist"
		echo "Folder $folder does not exist"
	fi
done
echo "Done!"
TIMER_STOP=$(date +%s)
backup_log "Tiempo de Ejecucion Total: $(echo "($TIMER_STOP - $TIMER_START)/60"| bc) minutes!"
backup_log "========================================================================"
exit 0
