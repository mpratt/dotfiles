#!/bin/bash
############################################################
# This Script creates a Slackware package for a kernel
# Autor: Michael Pratt | http://wwww.michael-pratt.com
#
# License: MIT
# Copyright (C) 2011 by Michael Pratt <pratt@hablarmierda.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
###########################################################
shopt -s checkwinsize
APPNAME="kernelpkg"
VERSION="1.0"
KSOURCE="/usr/src"
STAMP=$(date +%s)

trap "slackkernel_restore_bootlogo" 0 1 2 5 15
#################################################################
# Restore Bootlogo
#################################################################
slackkernel_restore_bootlogo()
{
	if [ -f "${KSOURCE}/linux-${KVERSION}/drivers/video/logo/logo_linux_clut224.ppm_original" ]; then
		echo "Restoring original Bootlogo"
		mv "${KSOURCE}/linux-${KVERSION}/drivers/video/logo/logo_linux_clut224.ppm_original" "${KSOURCE}/linux-${KVERSION}/drivers/video/logo/logo_linux_clut224.ppm"
	fi
}

#################################################################
# Usage
#################################################################
slackernel_usage()
{
	clear
	echo "$APPNAME - $VERSION"
	echo "This Script creates a Slackware package for a kernel"
	echo "Autor: Michael Pratt <pratt@hablarmierda.net>"
	echo "Url: http://www.michael-pratt.com/"
	echo "License: MIT X11 http://www.opensource.org/licenses/mit-license.php"
	echo ""
	echo "Usage: $(basename $0)"
	echo "	-k | --kernel [kernel version]"
	echo "	-c | --config [kernel configuration file]"
	echo "	-l | --logo [bootlogo replacement for logo_linux_clut224.ppm]"
	echo "	-s | --suffix [kernel suffix]"
	echo "	-o | --outputdir-dir [Directory]"
	echo "	-h | --hostname [Hostname]"
	echo "	-i | --initrd [1|0]"
	echo "	--no-clean (do not run Mr Proper)"
	echo "	--no-patch (do not apply custom patches)"
	echo "	--no-menu-config (do not run Menu Config)"
	echo "	--old-config (Use old config)"
	echo "	--current-config (Uses the current Config as base)"
	echo "	-h | --help"
	echo ""
	exit 0
}

#################################################################
# Spin this shit!
#################################################################
CUSTOMPATH="/mnt/data/Scripts/dotfiles/slackware/config/kernel"
if [[ "$(uname -p | grep -i 'celeron')" ]]; then
    KCONFIG="${CUSTOMPATH}/config-celeron"
elif [[ "$(uname -p | grep -i 'duo')" ]]; then
    KCONFIG="${CUSTOMPATH}/config-duo"
else
    KCONFIG=""
fi

if [ -f "/etc/slackware-version" ]; then
    echo "Slackware Detected"
    LOGO="${CUSTOMPATH}/logo_linux_clut224.ppm"
else
    LOGO=""
fi

KVERSION=""
KSUFFIX="-pratt"
HOST=""
OUTPUTDIR=""
CLEAN="1"
MENU="1"
PATCH="1"
MKOLDCONFIG="0"
INITRD="0"
while [ -n "$1" ]; do
	case ${1} in
		-l|--logo)
			shift
			LOGO="${1}";;
		-k|--kernel)
			shift
			KVERSION="${1}";;
		-c|--config)
			shift
			KCONFIG="${1}";;
		-s|--suffix)
			shift
			KSUFFIX="${1}";;
		-h|--hostname)
			shift
			HOST="${1}";;
		-i|--initrd)
			shift
			INITRD="${1}";;
		-o|--output-dir)
			shift
			OUTPUTDIR="${1}";;
        --old-config)
            MENU=0
            MKOLDCONFIG=1 ;;
		--no-clean)
			CLEAN=0;;
		--no-patch)
			PATCH=0;;
		--no-menu-config)
			MENU=0;;
		--current-config)
			KCONFIG="";;
		-h|--help|--usage) slackernel_usage;;
	esac
	shift
done

# Run some checks
echo "$APPNAME - $VERSION"
echo "This Script creates a Slackware package for a kernel"
[[ "$(whoami)" != "root" ]] && echo "You must be root to run this script" && exit 1
[ -z "${KVERSION}" ] && echo "You must specify the kernel version <Usage: $(echo $(basename $0)) -k $(uname -r)>" && exit 1
! [ -e "${KSOURCE}/linux-${KVERSION}" ] && echo "Kernel Source ${KVERSION} not found in ${KSOURCE}" && exit 1
! [ -e "${OUTPUTDIR}" ] && echo "Restoring Output to /tmp" && OUTPUTDIR="/tmp"

# Are you using a custom Bootlogo?
if [ -f "${LOGO}" ] && [[ "$(basename ${LOGO})" == "logo_linux_clut224.ppm" ]]; then
	echo "Backing up original Bootlogo"
	mv "${KSOURCE}/linux-${KVERSION}/drivers/video/logo/logo_linux_clut224.ppm" "${KSOURCE}/linux-${KVERSION}/drivers/video/logo/logo_linux_clut224.ppm_original"
	echo "Copying new Bootlogo"
	cp "${LOGO}" "${KSOURCE}/linux-${KVERSION}/drivers/video/logo/"
fi

# Patches
if [ "${PATCH}" -eq "1" ]; then
	cd ${KSOURCE}/linux-${KVERSION}
	if [ -f "${CUSTOMPATH}/patches/channel-negative-one-maxim.patch" ]; then
		echo "Negative Channel Patch (For Aircrack)"
		cp ${CUSTOMPATH}/patches/channel-negative-one-maxim.patch ${KSOURCE}/linux-${KVERSION}/
		patch -p1 -N < channel-negative-one-maxim.patch
		rm ${KSOURCE}/linux-${KVERSION}/channel-negative-one-maxim.patch
	fi
fi

# Prepare for compilation
echo "Updating /usr/src/linux symlink"
ln -sf "${KSOURCE}/linux-${KVERSION}" "${KSOURCE}/linux"
cd "${KSOURCE}/linux-${KVERSION}"

if [ "${CLEAN}" -eq "1" ]; then
	echo "Call Mr Proper!"
	make mrproper
fi

# Using custom config?
if [ -f "${KCONFIG}" ]; then
	echo "Using Custom configuration file"
	cp "${KCONFIG}" "${KSOURCE}/linux-${KVERSION}/.config"
else
	echo "*** Using configuration of the current kernel ***"
	zcat /proc/config.gz > "${KSOURCE}/linux-${KVERSION}/.config"
fi

# Kernel Suffix
if [ -n "${KSUFFIX}" ]; then
	KSUFFIX="-$(echo ${KSUFFIX/-/})"
	echo "Updating Suffix"
	sed -i s:CONFIG_LOCALVERSION=\".*\":CONFIG_LOCALVERSION=\"${KSUFFIX}\":g ${KSOURCE}/linux-${KVERSION}/.config
fi

# Kernel Hostname
if [ -n "${HOST}" ]; then
	echo "Updating Host"
	sed -i s:CONFIG_DEFAULT_HOSTNAME=\".*\":CONFIG_DEFAULT_HOSTNAME=\"${HOST}\":g ${KSOURCE}/linux-${KVERSION}/.config
fi

if [ "${MENU}" -eq "1" ]; then
	echo "Tweak the configuration!"
	make menuconfig
fi

if [ "${MKOLDCONFIG}" -eq "1" ]; then
	echo "Make Oldconfig"
	make oldconfig
fi

echo "Start Compilation"
# For Old timers => make bzImage && make modules && make modules_install
make tar-pkg

# Change directory, rename files and delete useless stuff
cd "${KSOURCE}/linux-${KVERSION}/tar-install"
#mv "boot/System.map-${KVERSION}" "boot/System.map-${KVERSION}${KSUFFIX}"
#mv "boot/config-${KVERSION}" "boot/config-${KVERSION}${KSUFFIX}"
#mv "boot/vmlinuz-${KVERSION}" "boot/vmlinuz-${KVERSION}${KSUFFIX}"
rm -rf boot/vmlinux* lib/firmware/

if [ "${INITRD}" -eq 1 ] && [ -f "${KSOURCE}/linux-${KVERSION}/tar-install/boot/vmlinuz-${KVERSION}${KSUFFIX}" ]; then
	echo "Running mkinitrd"
	$(/usr/share/mkinitrd/mkinitrd_command_generator.sh -a "-o ${KSOURCE}/linux-${KVERSION}/tar-install/boot/intrd-${KVERSION}${KSUFFIX}.gz" --run ${KSOURCE}/linux-${KVERSION}/tar-install/boot/vmlinuz-${KVERSION}${KSUFFIX})
    # $(/usr/share/mkinitrd/mkinitrd_command_generator.sh -a "-o /usr/src/linux-3.2.13/tar-install/boot/intrd-3.2.13-pratt.gz" --run /usr/src/linux-3.2.13/tar-install/boot/vmlinuz-3.2.13-pratt)
else
    echo "No Initrd"
fi

mkdir install/
cat << EOSD > install/slack-desc
kernel-custom$(echo ${KSUFFIX/-/_}): Kernel Custom $(echo ${KVERSION}${KSUFFIX})
kernel-custom$(echo ${KSUFFIX/-/_}): Created: $(date)
kernel-custom$(echo ${KSUFFIX/-/_}):
kernel-custom$(echo ${KSUFFIX/-/_}): Do not forget to update your lilo/grub with the initrd
kernel-custom$(echo ${KSUFFIX/-/_}): initrd boot/intrd-$(echo ${KVERSION}${KSUFFIX}).gz
kernel-custom$(echo ${KSUFFIX/-/_}):
kernel-custom$(echo ${KSUFFIX/-/_}):
kernel-custom$(echo ${KSUFFIX/-/_}):
kernel-custom$(echo ${KSUFFIX/-/_}):  Author: Michael Pratt <pratt@hablarmierda.net>
kernel-custom$(echo ${KSUFFIX/-/_}):
kernel-custom$(echo ${KSUFFIX/-/_}):
EOSD

makepkg -l y -c y "${OUTPUTDIR}/kernel-custom${KSUFFIX/-/_}-${KVERSION}_${STAMP}-$(uname -m)-1_mpratt.tgz"
upgradepkg --install-new "${OUTPUTDIR}/kernel-custom${KSUFFIX/-/_}-${KVERSION}_${STAMP}-$(uname -m)-1_mpratt.tgz"

echo "Do not forget to update your lilo/grub with the initrd /boot/intrd-$(echo ${KVERSION}${KSUFFIX}).gz"
