" .vimrc
" Michael Pratt
" http://www.michael-pratt.com

set nocompatible " Forget compatibility with Vi. Who cares. - Required by Vundle
filetype off     " required by Vundle

" On Windows, also use '.vim' instead of 'vimfiles'; this makes
" synchronization across (heterogeneous) systems easier.
if has("win32") || has("win64")
    set runtimepath^=$HOME/.vim
    set runtimepath+=$HOME/.vim/after
    set ssl     " it should do ~ vs $HOME
endif

" Setting up vim-plug as the package manager
if !filereadable(expand("~/.vim/autoload/plug.vim"))
    echo "Installing vim-plug and plugins. Restart vim after finishing the process."
    silent call mkdir(expand("~/.vim/autoload", 1), 'p')
    execute "!curl -fLo ".expand("~/.vim/autoload/plug.vim", 1)." https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
    autocmd VimEnter * PlugInstall
endif

" Load custom settings/plugins
call plug#begin('~/.vim/plugged')
for fpath in split(globpath('~/.vim/local/plugins', '*.vim'), '\n')
    exe 'source' fpath
endfor
call plug#end()
filetype plugin indent on
syntax on

" Load stuff only when the gui is running
if has("gui_running")
    if filereadable(expand('~/.vim/plugged/onedark.vim/colors/onedark.vim'))
        colorscheme onedark
    elseif filereadable(expand('~/.vim/plugged/molokai/colors/molokai.vim'))
        colorscheme molokai
    endif
else
    if filereadable(expand('~/.vim/plugged/molokai/colors/molokai.vim'))
        colorscheme molokai
    endif
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8

" Terminal Stuff
set t_Co=256
set term=xterm-256color

" Disable Background Color Erase so that color scheme work properly
" when vim is used inside tmux and GNU screen
set t_ut=

" How my editor looks like
set linespace=3                            " Prefer a slightly higher line height
set guifont=Source\ Code\ Pro\ Medium\ 10  " Font and Size
set noerrorbells                           " disable sound on errors
set novisualbell                           " disable sound on errors
set nowrap                                 " Don't wrap lines
set linebreak                              " Wrap lines at convenient points
set title                                  " Show Title

" General Settings
set ffs=unix,dos,mac
set switchbuf=usetab,newtab
set exrc               " Enable project specific .vimrc
set nofoldenable       " Disable Folding when opening files, use zi to enable manually
set nostartofline      " Avoid moving cursor to BOL when jumping around
set ruler              " show the cursor position all the time
set autoread           " auto read when file is changed from outside
set bs=2               " allow backspacing over everything in insert mode
set backspace=indent,eol,start  " make backspaces more powerfull
set history=100        " keep 100 lines of command line history
set hidden             " Switch between buffers without saving (needed by coc)
set showcmd            " Show command in bottom right portion of the screen
set number             " Show lines numbers
set showmatch          " Cursor shows matching ) and }
set cursorline         " Show Cursor line
set noshowmode         " I dont need this, since Im using Airline
set clipboard=unnamed  " yank to the system register (*) by default
set confirm            " Y-N-C prompt if closing with unsaved changes.
set mouse=a            " enable using the mouse if terminal emulator supports it (xterm does)
set selectmode+=mouse  " Enable selections with the mouse
set mousehide          " Hide mouse when typing
set synmaxcol=1000     " long lines syntax coloring/highlighting
set formatoptions+=1   " When wrapping paragraphs, don't end lines with 1-letter words (looks stupid)
set pastetoggle=<F11>  " When in insert mode, press <F11> to go to paste mode, where you can paste mass data that wont be autoindented
set ttyfast            " Optimize for fast terminal connections
set gdefault           " Add the g flag to search/replace by default
set laststatus=2       " Might be needed for vim-airline
set wildmenu           " Use bash-like tab completion in Vim command line
set wildmode=list:longest,full

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" Stuff to ignore when tab completing
set wildignore+=.hg,.git,.svn
set wildignore+=*.pyc    
set wildignore+=*.jpg,*.png,*.xpm,*.gif,*.bmp,*.jpeg
set wildignore+=*DS_Store*
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.aux,*.out,*.toc
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest
set wildignore+=*.spl
set wildignore+=*.sw? 
set wildignore+=*.luac
set wildignore+=migrations
set wildignore+=*.pyc
set wildignore+=*.orig
set wildignore+=node_modules/**

" keep some context when moving
set scrolloff=15
set sidescrolloff=15

" make plugins smoother (don't redraw while executing macros)
set lazyredraw

" Tab and Indenting Stuff
set expandtab           " enter spaces when tab is pressed
set textwidth=500       " break lines when line length increases
set tabstop=4           " use 4 spaces to represent tab
set shiftwidth=4        " number of spaces to use for auto indent
set softtabstop=4
set autoindent          " auto indentation
set smartindent

" Search Settings
set hlsearch           " Highlight searching
set ignorecase         " case insensitive search
set smartcase          " unless uppercase letters are used in the regex.
set incsearch          " Set incremental searching
set fileignorecase     " Ignore case while searching for a file.

" Backup and Undo Settings
set nobackup
set nowritebackup
set noswapfile         " it's 2015+, Vim.
set undolevels=1000    " use many levels of undo
set fillchars+=vert:│  "vertical splits less gap between bars

" Undo/Backup/Swap folders. Create them when needed
set undodir=~/.vim/local/tmp/undo/
set backupdir=~/.vim/local/tmp/backup/
set directory=~/.vim/local/tmp/swap/

if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif

if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif

if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif

if !isdirectory(expand('~/.vim/local/sessions'))
    call mkdir(expand('~/.vim/local/sessions'), "p")
endif

" Set sensible heights for splits
set winheight=50

" Open splits on the right
set splitright

" Autocomplete stuff
set omnifunc=syntaxcomplete#Complete

" Time out on key codes but not mappings.
" Basically this makes terminal Vim work sanely.
set notimeout
set ttimeout
set ttimeoutlen=10

" Better Completion
set completeopt=longest,menuone,noinsert
set complete=.,b,u,t,i,w " Scan the current buffer, buffers from other windows, buffers from the buffer list, Scan buffers that have been unloaded from the buffer list, Tag completion and the current and included files
set shortmess+=c   " don't give |ins-completion-menu| messages.

" Show end of command visually when editing text
set cpoptions+=$

" Set the tag file search order
set tags=./TAGS;

" (Hopefully) removes the delay when hitting esc in insert mode
set noesckeys

" Set Shell
set shell=/bin/bash

" Spell checking stuff
try
    lang en_us
catch
endtry

if has("gui_running")
    set guioptions-=T                          " remove toolbar
    set guioptions-=m                          " remove menu bar
    set guioptions-=e                          " remove buffer bar

    " Display tabs and trailing spaces visually
    set list 
    set listchars=nbsp:¬,eol:↳,tab:└─,extends:»,precedes:«

    " Start little bigger
    set lines=40
    set columns=150
endif

" shortcuts to open files externally and perform online searches
if has('mac')
    let g:open_command = 'open'
elseif has('unix')
    let g:open_command = 'xdg-open'
else
    let g:open_command = 'start'
endif

" Open diffs in vertical splits
" Use 'xdiff' library options: patience algorithm with indent-heuristics (same to Git options)
" NOTE: vim uses the external diff utility which doesn't do word diffs nor can it find moved-and-modified lines.
" See: https://stackoverflow.com/questions/36519864/the-way-to-improve-vimdiff-similarity-searching-mechanism
set diffopt=internal,filler,vertical,context:5,foldcolumn:1,indent-heuristic,algorithm:patience


" Always show signcolumns
set signcolumn=yes
" Better color to the Debug Gutter, since it normally displays errors
"highlight SignColumn guibg=red 

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Common Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Execute a command while preserving cursor position and history.
function! Preserve(command)
    let _s=@/         " Save search history.
    let l = line('.') " Save current line.
    let c = col('.')  " Save current column.
    execute a:command
    let @/=_s         " Reset search history.
    call cursor(l, c) " Reset cursor position.
endfunction

" Search and open a testfile based on the given Input
function! FindTestFile()
    let filename = expand('%:r')
    let extension = expand('%:e')
    let fullpath = expand('%:p:h')
    for p in split(fullpath, '/')
        let files = [ substitute(fullpath, '/' . p . '/', '/tests/', '') . '/' . filename . 'Test.' . extension, substitute(fullpath, '/' . p . '/', '/tests/', '') . '/' . filename . '.' . extension ]

        for f in files
            if filereadable(f)
                echo f . ' exists'
                execute ':edit ' . f
                return 1
            endif
        endfor

    endfor

    echo 'No testing file was found'
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Common abbreviations
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
iabbrev lenght length
iabbrev llorem Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Etiam lacus ligula, accumsan id imperdiet rhoncus, dapibus vitae arcu.  Nulla non quam erat, luctus consequat nisi

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" The following mappings change/overwrite the normal behaviour of some keys
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Unmap the arrow keys in normal and visual mode
no <up> <Nop>
no <down> <Nop>
no <left> <Nop>
no <right> <Nop>
vno <up> <Nop>
vno <down> <Nop>
vno <left> <Nop>
vno <right> <Nop>

" This makes the cursor move to the next visual line when navigating wrapped text, rather than the next actual line.
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Visual Mode Indenting
vmap > >gv
vmap < <gv

" I really hate that things don't auto-center
nmap G Gzz
nmap }dd }zz
nmap { {ddzz

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" Same when jumping around
nnoremap g; g;zz
nnoremap g, g,zz

" Common Typos
command! -bang E e<bang>
command! -bang Q q<bang>
command! -bang W w<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Wq wq<bang>
command! -bang WQ wq<bang>

" Automatically jump to end of text you pasted - Paste multiple lines multiple times with simple ppppp. Except on normal mode
vnoremap <silent> y y`]
vnoremap <silent> p p`]
vnoremap <silent> p p^
" nnoremap <silent> p p`]

" This turns off Vim’s crazy default regex characters and makes searches use normal regexes
nnoremap / /\v
vnoremap / /\v

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Other Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Want a different map leader than \
let mapleader = "\<Space>"

" Use jj to escape insert mode
inoremap jj <ESC>

" Switch between windows easily with alt and arrow keys
nmap <silent><A-Up> :wincmd k<CR>
nmap <silent><A-Down> :wincmd j<CR>
nmap <silent><A-Left> :wincmd h<CR>
nmap <silent><A-Right> :wincmd l<CR>

" Tab Navigation
nmap <C-Tab> :bn<CR>
nmap <C-S-Tab> :bp<CR>

" Visual Mode Replace
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>
nnoremap <C-r> :%s/<c-r><c-w>//gc<left><left><left>

" Source selection with <leader>+s on visual mode
vnoremap <leader>r y:execute @@<cr>:echo 'Sourced selection.'<cr>

" Use <leader>+s for saving on normal mode
noremap <leader>s :update<CR>

" Make <leader>w write and close the buffer
noremap <leader>w :w<CR>:bd<CR> 

" System clipboard interaction
noremap <leader>y "+y
noremap <leader>p "+p

" Create a new line below the cursor in normal mode
noremap <leader>o :only<CR>

" Clear current search highlight
noremap <leader>h :nohlsearch<CR>

" Select entire buffer
nnoremap <leader>b ggVG

"Quickly open a markdown buffer for scribble
noremap <leader>l :e ~/buffer.md<cr>

" Go to first error
nnoremap <leader>e :lfirst<CR>

" <leader>= Reindent all the file
nnoremap <Leader>= :call Preserve("normal gg=Gzz")<CR>

" Map <leader> + 1-9 to jump to respective buffer
let i = 1
while i < 10
    execute ":nmap <leader>" . i . " :buffer " . i . "<CR>"
    let i += 1
endwhile

" Made D and Y behave
nnoremap D d$
nnoremap Y y$

" Use H and L to navigate to start/finish of line
noremap H ^
noremap L $

" Map U to redo (since u undo's)
nnoremap U <c-r>

" Panic Button
nnoremap <f9> mzggg?G`z

" Move lines up / down
nmap <C-Up> ddkP
nmap <C-Down> ddp

" Find Test Files
nnoremap <Leader>t :call FindTestFile()<CR>
nnoremap <Leader>j :call search("''")<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Auto Commands
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Correct some filetypes
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown
au BufRead,BufNewFile *.ejs,*.mustache setfiletype html
au BufNewFile,BufRead *.json set ft=javascript
au BufRead,BufNewFile *.json.* setfiletype json

" Change cwd to file we are currently editing
autocmd BufEnter * silent! lcd %:p:h

" Remove trailing whitespace on save for a bunch of filetypes on save
autocmd BufWritePre *.php call Preserve("%s/\\s\\+$//e")
autocmd BufWritePre *.md call Preserve("%s/\\s\\+$//e")
autocmd BufWritePre *.py call Preserve("%s/\\s\\+$//e")
autocmd BufWritePre *.sh call Preserve("%s/\\s\\+$//e")
autocmd BufWritePre *.txt call Preserve("%s/\\s\\+$//e")
autocmd BufWritePre *.js call Preserve("%s/\\s\\+$//e")
autocmd BufWritePre *.json call Preserve("%s/\\s\\+$//e")
autocmd BufWritePre *.html call Preserve("%s/\\s\\+$//e")

" Exit insert mode after 4 seconds of idle time
" :au CursorHoldI * stopinsert 

" Saves when focus lost.
au FocusLost * silent! wa

" http://superuser.com/questions/305945/gvim-omni-completion-preview-window-doesnt-go-away
au InsertLeave * if pumvisible() == 0|pclose|endif

" Resize splits when the window is resized
au VimResized * :wincmd =


" Only show cursorline in the current window and in normal mode.
augroup cline
    au!
    au WinLeave,InsertEnter * set nocursorline
    au WinEnter,InsertLeave * set cursorline
augroup END

" Only show trailing whitespace when not in insert mode
augroup trailing
    au!
    au InsertEnter * :set listchars-=trail:•
    au InsertLeave * :set listchars+=trail:•
augroup END

" Reload vimrc when edited
" autocmd BufWritePost .vimrc,_vimrc,vimrc so $MYVIMRC
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Source ~/.vimrc.after if it exists. In order to allow overriding
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if filereadable(expand("~/vimrc.after"))
    source ~/vimrc.after
endif
