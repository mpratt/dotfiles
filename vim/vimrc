" .vimrc
" Michael Pratt
" http://www.michael-pratt.com

set nocompatible " Forget compatibility with Vi. Who cares. - Required by Vundle
filetype off     " required by Vundle

" On Windows, also use '.vim' instead of 'vimfiles'; this makes
" synchronization across (heterogeneous) systems easier.
if has("win32") || has("win64")
    set runtimepath^=$HOME/.vim
    set runtimepath+=$HOME/.vim/after
endif

" Setting up vim-plug as the package manager
if !filereadable(expand("~/.vim/autoload/plug.vim"))
    echo "Installing vim-plug and plugins. Restart vim after finishing the process."
    silent call mkdir(expand("~/.vim/autoload", 1), 'p')
    execute "!curl -fLo ".expand("~/.vim/autoload/plug.vim", 1)." https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
    autocmd VimEnter * PlugInstall
endif

" Load custom settings/plugins
call plug#begin('~/.vim/plugged')
for fpath in split(globpath('~/.vim/local/plugins', '*.vim'), '\n')
  exe 'source' fpath
endfor
call plug#end()
filetype plugin indent on
syntax on

" Load stuff only when the gui is running
if has("gui_running")
    if filereadable(expand('~/.vim/plugged/onedark.vim/colors/onedark.vim'))
        colorscheme onedark
    elseif filereadable(expand('~/.vim/plugged/molokai/colors/molokai.vim'))
        colorscheme molokai
    endif
else
    if filereadable(expand('~/.vim/plugged/vim/colors/dracula.vim'))
        colorscheme dracula
    endif
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8

" Terminal Stuff
set t_Co=256
set term=xterm-256color

" Disable Background Color Erase so that color scheme work properly
" when vim is used inside tmux and GNU screen
set t_ut=

" How my editor looks like
set linespace=3                            " Prefer a slightly higher line height
" set guifont=consolas\ regular\ 11        " Font and Size
" set guifont=Fira\ Mono\ Regular\ 10      " Font and Size
set guifont=Source\ Code\ Pro\ Medium\ 10  " Font and Size
set noerrorbells                           " disable sound on errors
set novisualbell                           " disable sound on errors
set nowrap                                 " Don't wrap lines
set linebreak                              " Wrap lines at convenient points
set title                                  " Show Title
set guioptions-=T                          " remove toolbar
set guioptions-=m                          " remove menu bar
set guioptions-=e                          " remove buffer bar

" General Settings
set ffs=unix,dos,mac
set switchbuf=usetab,newtab
set exrc               " Enable project specific .vimrc
set nofoldenable       " Disable Folding when opening files, use zi to enable manually
set nostartofline      " Avoid moving cursor to BOL when jumping around
set ruler              " show the cursor position all the time
set autoread           " auto read when file is changed from outside
set bs=2               " allow backspacing over everything in insert mode
set backspace=indent,eol,start  " make backspaces more powerfull
set history=100        " keep 100 lines of command line history
set hidden             " Switch between buffers without saving
set showcmd            " Show command in bottom right portion of the screen
set number             " Show lines numbers
set showmatch          " Cursor shows matching ) and }
set cursorline         " Show Cursor line
set noshowmode         " I dont need this, since Im using Airline
set clipboard=unnamed  " yank to the system register (*) by default
set confirm            " Y-N-C prompt if closing with unsaved changes.
set mouse=a            " enable using the mouse if terminal emulator supports it (xterm does)
set selectmode+=mouse  " Enable selections with the mouse
set mousehide          " Hide mouse when typing
set synmaxcol=530      " long lines syntax coloring/highlighting
set formatoptions+=1   " When wrapping paragraphs, don't end lines with 1-letter words (looks stupid)
set pastetoggle=<F11>  " When in insert mode, press <F11> to go to paste mode, where you can paste mass data that won't be autoindented
set ttyfast            " Optimize for fast terminal connections
set gdefault           " Add the g flag to search/replace by default
set laststatus=2       " Might be needed for vim-airline
set wildmenu           " Use bash-like tab completion in Vim command line
set wildmode=longest,list:longest

" Stuff to ignore when tab completing
set wildignore+=.hg,.git,.svn
set wildignore+=*.pyc    
set wildignore+=*.jpg,*.png,*.xpm,*.gif,*.bmp,*.jpeg
set wildignore+=*DS_Store*
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.aux,*.out,*.toc
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest
set wildignore+=*.spl
set wildignore+=*.sw? 
set wildignore+=*.luac
set wildignore+=migrations
set wildignore+=*.pyc
set wildignore+=*.orig

" keep some context when moving
set scrolloff=15
set sidescrolloff=15

" make plugins smoother (don't redraw while executing macros)
set lazyredraw

" Tab and Indenting Stuff
set expandtab           " enter spaces when tab is pressed
set textwidth=500       " break lines when line length increases
set tabstop=4           " use 4 spaces to represent tab
set shiftwidth=4        " number of spaces to use for auto indent
set softtabstop=4
set autoindent          " auto indentation
set smartindent

" Search Settings
set hlsearch           " Highlight searching
set ignorecase         " case insensitive search
set smartcase          " unless uppercase letters are used in the regex.
set incsearch          " Set incremental searching
set fileignorecase     " Ignode case whil searching for a file.

" Backup and Undo Settings
set backup             " enable backups
set noswapfile         " it's 2015+, Vim.
set undolevels=1000    " use many levels of undo
set fillchars+=vert:│  "vertical splits less gap between bars

" Undo/Backup/Swap folders. Create them when needed
set undodir=~/.vim/local/tmp/undo/
set backupdir=~/.vim/local/tmp/backup/
set directory=~/.vim/local/tmp/swap/

if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif

if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif

if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif

if !isdirectory(expand('~/.vim/local/sessions'))
    call mkdir(expand('~/.vim/local/sessions'), "p")
endif

" Set sensible heights for splits
set winheight=50

" Autocomplete stuff
set omnifunc=syntaxcomplete#Complete

" Time out on key codes but not mappings.
" Basically this makes terminal Vim work sanely.
set notimeout
set ttimeout
set ttimeoutlen=10

" Better Completion
set completeopt=longest,menu,preview
set completeopt+=menuone
set complete=.,w,b,u,t
set shortmess+=c   " Shut off completion messages

" Show end of command visually when editing text
set cpoptions+=$

" Set the tag file search order
set tags=./TAGS;

" (Hopefully) removes the delay when hitting esc in insert mode
set noesckeys

" Set Shell
set shell=/bin/bash

" Spell checking stuff
try
  lang en_us
catch
endtry

if has("gui_running")
    " Display tabs and trailing spaces visually
    set list 
    set listchars=nbsp:¬,eol:↳,tab:└─,extends:»,precedes:«

    " Other Alternative
    "set listchars=tab:›\ 
    "set listchars+=trail:-
    "set listchars+=extends:>
    "set listchars+=precedes:<
    "set listchars+=eol:¬

    " Other Alternative
    "set listchars=tab:▶\ 
    "set listchars+=eol:★
    "set listchars+=trail:◥
    "set listchars+=extends:❯
    "set listchars+=precedes:❮ 

    " set tab labels to show at most 15 characters
    " set guitablabel=%-0.15t%M

    " Start little bigger
    set lines=40
    set columns=150
endif

" Windows Only Settings
if has("win32") || has("win64")
    set ssl     " it should do ~ vs $HOME
endif

" shortcuts to open files externally and perform online searches
if has('mac')
    let g:open_command = 'open'
elseif has('unix')
    let g:open_command = 'xdg-open'
else
    let g:open_command = 'start'
endif

" Better color to the Debug Gutter
highlight SignColumn guibg=red

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Common Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Execute a command while preserving cursor position and history.
function! Preserve(command)
    let _s=@/         " Save search history.
    let l = line('.') " Save current line.
    let c = col('.')  " Save current column.
    execute a:command
    let @/=_s         " Reset search history.
    call cursor(l, c) " Reset cursor position.
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Common abbreviations
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
iabbrev lenght length
iabbrev teh the
iabbrev Teh The

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" The following mappings change/overwrite the normal behaviour of some keys
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Unmap the arrow keys in normal and visual mode
no <up> <Nop>
no <down> <Nop>
no <left> <Nop>
no <right> <Nop>
vno <up> <Nop>
vno <down> <Nop>
vno <left> <Nop>
vno <right> <Nop>

" This makes the cursor move to the next visual line when navigating wrapped text, rather than the next actual line.
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Use sane regexes.
nnoremap / /\v
vnoremap / /\v

" Visual Mode Indenting
vmap > >gv
vmap < <gv

" ddI really hate that things don't auto-center
nmap G Gzz
nmap }dd }zz
nmap { {ddzz

" ddKeep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" Same when jumping around
nnoremap g; g;zz
nnoremap g, g,zz

" Common Typos
command! -bang E e<bang>
command! -bang Q q<bang>
command! -bang W w<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Wq wq<bang>
command! -bang WQ wq<bang>

" Automatically jump to end of text you pasted - Paste multiple lines multiple times with simple ppppp.
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Other Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Want a different map leader than \
let mapleader = "\<Space>"

" Switch between windows easily with alt and arrow keys
nmap <silent><A-Up> :wincmd k<CR>
nmap <silent><A-Down> :wincmd j<CR>
nmap <silent><A-Left> :wincmd h<CR>
nmap <silent><A-Right> :wincmd l<CR>

" Move between next/previous tabs
no <C-right> :tabnext<CR>
no <C-left> :tabprevious<CR>

" Tab Navigation
nmap <C-Tab> :bn<CR>
nmap <C-S-Tab> :bp<CR>

" Visual Mode Replace
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>
nnoremap <C-r> :%s/<c-r><c-w>//gc<left><left><left>

" Use <leader>+s for saving
noremap <C-s> :echoerr "Use leader-s for saving"<CR><ESC>
inoremap <C-s> <ESC>:echoerr "Use leader-s for saving"<CR><ESC>
noremap <leader>s :update<CR>

" Make <leader>w write and close the buffer
noremap <leader>w :w<CR>:bd<CR> 

" System clipboard interaction
noremap <leader>y "+y
noremap <leader>p "+p

" Create a new line below the cursor in normal mode
noremap <leader>o o<ESC>k

" Clear current search highlight
noremap <leader>h :nohlsearch<CR>

" Toggle line numbers
nnoremap <leader>n :setlocal rnu!<cr>

" Source selection
vnoremap <leader>a y:execute @@<cr>:echo 'Sourced selection.'<cr>

" Select entire buffer
nnoremap <leader>b ggVG

" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>dm mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Split line (sister to [J]oin lines)
nnoremap <A-p> i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>`w

" Made D and Y behave
nnoremap D d$
nnoremap Y y$

" Use H and L to navigate to start/finish of line
noremap H ^
noremap L $
vnoremap L g_

" qq to record, Q to replay
" nnoremap Q @q

" Move lines up / down
nmap <C-Up> ddkP
nmap <C-Down> ddp

" Map U to redo (since u undo's)
nnoremap U <c-r>

" Type 12<Enter> to go to line 12 (12G breaks my wrist) Or just <Enter> to go to the start of the file
nnoremap <CR> gg

" <leader>= Reindent all the file
nnoremap <Leader>= :call Preserve("normal gg=Gzz")<CR>

" Send visual selection to my site
" vnoremap <c-p> :w !curl -sF 'sprunge=<-' 'http://michael-pratt.com' \| tr -d '\n ' \| pbcopy && open `pbpaste`<cr>

" Panic Button
nnoremap <f9> mzggg?G`z

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Auto Commands
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Omni Complete settings
" autocmd FileType python set omnifunc=pythoncomplete#Complete
" autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
" autocmd FileType css set omnifunc=csscomplete#CompleteCSS
" autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
" autocmd FileType php set omnifunc=phpcomplete#CompletePHP

" Add $ to the keywords when running php
" autocmd FileType php setlocal iskeyword+=$

" Make sure all markdown files have the correct filetype set and setup wrapping
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown

" Treat JSON files like JavaScript
au BufNewFile,BufRead *.json set ft=javascript

" Change cwd to file we are currently editing
autocmd BufEnter * silent! lcd %:p:h

" Remove trailing whitespace on save for a bunch of filetypes on save
if exists("*Preserve")
    autocmd BufWritePre *.php call Preserve("%s/\\s\\+$//e")
    autocmd BufWritePre *.md call Preserve("%s/\\s\\+$//e")
    autocmd BufWritePre *.py call Preserve("%s/\\s\\+$//e")
    autocmd BufWritePre *.sh call Preserve("%s/\\s\\+$//e")
    autocmd BufWritePre *.txt call Preserve("%s/\\s\\+$//e")
    autocmd BufWritePre *.js call Preserve("%s/\\s\\+$//e")
    autocmd BufWritePre *.json call Preserve("%s/\\s\\+$//e")
    autocmd BufWritePre *.html call Preserve("%s/\\s\\+$//e")
else
    autocmd BufWritePre *.php :%s/\s\+$//e
    autocmd BufWritePre *.md :%s/\s\+$//e
    autocmd BufWritePre *.py :%s/\s\+$//e
    autocmd BufWritePre *.sh :%s/\s\+$//e
    autocmd BufWritePre *.txt :%s/\s\+$//e
    autocmd BufWritePre *.js :%s/\s\+$//e
    autocmd BufWritePre *.json :%s/\s\+$//e
    autocmd BufWritePre *.html :%s/\s\+$//e
endif

" JsBeautifier Plugin
au Filetype javascript source $HOME/.vim/local/scripts/jsbeautify.vim

" Exit insert mode after 4 seconds of idle time
" :au CursorHoldI * stopinsert 

" Saves when focus lost.
au FocusLost * silent! wa

" http://superuser.com/questions/305945/gvim-omni-completion-preview-window-doesnt-go-away
au InsertLeave * if pumvisible() == 0|pclose|endif

" Resize splits when the window is resized
au VimResized * :wincmd =

" Only show cursorline in the current window and in normal mode.
augroup cline
    au!
    au WinLeave,InsertEnter * set nocursorline
    au WinEnter,InsertLeave * set cursorline
augroup END

" Only show trailing whitspace when not in insert mode
augroup trailing
    au!
    au InsertEnter * :set listchars-=trail:•
    au InsertLeave * :set listchars+=trail:•
augroup END

" Reload vimrc when edited
" autocmd BufWritePost .vimrc,_vimrc,vimrc so $MYVIMRC
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Source ~/.vim/.vimrc.after if it exists. In order to allow overriding
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if filereadable(expand("~/.vim/vimrc.after"))
  source ~/.vim/vimrc.after
endif
